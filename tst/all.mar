^include(@/pico/pico.mar)

;; TITLE
pm_set_title("pico-mar")

;; SOUND
;;`pm_output_sound("start.wav")`

;; GET-SIZE
var log = pm_get_size_internal()
print(log)

var cnt = pm_pct_to_pos(0.5, 0.5)
print(cnt)

;;;

;; CLEAR
pm_set_color_clear(Color [255,255,255,255])
pm_output_clear()
pm_output_present()

pm_input_delay(2000)

;; DRAW-IMAGE
pm_set_anchor(HAnchor.Center(), VAnchor.Middle())
pm_output_draw_image(cnt, "open.png")
pm_output_present()

pm_input_delay(2000)

;; CROP-IMAGE
pm_set_image_crop(Rect [XY[0,0], WH[24,24]])
pm_set_image_size(WH [24,24])
pm_output_draw_image(cnt, "open.png")
pm_output_present()

pm_input_delay(2000)

;; DRAW-PIXEL
pm_set_color_clear(Color [0,0,0,255])
pm_set_color_draw(Color [255,255,255,255])
pm_output_clear()
pm_output_draw_pixel(cnt)
pm_output_present()

pm_input_delay(2000)

;; DRAW-TEXT
pm_set_font("tiny.ttf", 10)
pm_output_draw_text(cnt, "Hello!")
pm_output_present()

pm_input_delay(2000)

;; SET-GRID
pm_set_grid(false)
pm_output_present()

pm_input_delay(2000)

;; WRITE
pm_set_cursor(pm_pct_to_pos(1/5,1/5))
pm_output_write("1 ")
pm_output_write("2 ")
pm_output_writeln("3")
pm_output_writeln("")
pm_output_writeln("pico")
pm_output_present()

pm_input_delay(2000)

;;;

;; SET-FONT
pm_set_font("tiny.ttf", 5)
pm_output_writeln("pico")
pm_output_present()

pm_input_delay(2000)

;; MOUSE
var e: PM.Mouse.Button = pm_input_event(`SDL_MOUSEBUTTONDOWN`)!Mouse!Button
pm_output_draw_pixel(XY [e.pos.x,e.pos.y])
pm_output_present()

pm_input_delay(2000)

;;;
;; SET-GRID
pm_set.grid(true)

;; DRAW-LINE
pm_output.draw.line(pm_pct-to-pos(0,1), pm_pct-to-pos(1,0))
pm_output.draw.line(pm_pct-to-pos(0,0), pm_pct-to-pos(1,1))

;; DRAW-RECT
pm_output.draw.rect([cnt,[21,21]])

;; DRAW-OVAL
pm_output.draw.oval([pm_pct-to-pos(2/3,1/2),[6,6]])

;; SET-ANCHOR
pm_set.anchor(:HAnchor-Right, :VAnchor-Top)
pm_output.draw.rect([pm_pct-to-pos(1,0),[5,5]])

pm_output.present()
pm_input.delay(2000)

;; SET-ZOOM

pm_set.size(:internal, [log.x*0.9,log.y*0.9])
pm_output.draw.pixel(pm_pct-to-pos(1/2,1/2))
pm_output.present()
pm_input.delay(500)

pm_set.size(:internal, [log.x*0.8,log.y*0.8])
pm_output.draw.pixel(pm_pct-to-pos(1/2,1/2))
pm_output.present()
pm_input.delay(500)

pm_set.size(:internal, [log.x*0.7,log.y*0.7])
pm_output.draw.pixel(pm_pct-to-pos(1/2,1/2))
pm_output.present()
pm_input.delay(500)

pm_set.size(:internal, [log.x*0.6,log.y*0.6])
pm_output.draw.pixel(pm_pct-to-pos(1/2,1/2))
pm_output.present()
pm_input.delay(500)

pm_set.size(:internal, [log.x*0.5,log.y*0.5])
pm_output.draw.pixel(pm_pct-to-pos(1/2,1/2))
pm_output.present()
pm_input.delay(500)

;; SET-PAN

val pos = pm_pct-to-pos(1/2,1/2)

pm_set.pan([0,0])
pm_output.draw.pixel(pos)
pm_output.present()
pm_input.delay(500)

pm_set.pan([5,5])
pm_output.draw.pixel(pos)
pm_output.present()
pm_input.delay(500)

pm_set.pan([10,10])
pm_output.draw.pixel(pos)
pm_output.present()
pm_input.delay(500)

pm_set.pan([5,5])
pm_output.draw.pixel(pos)
pm_output.present()
pm_input.delay(500)

pm_set.pan([0,0])
pm_output.draw.pixel(pos)
pm_output.present()
pm_input.delay(500)

pm_input.delay(2000)

pm_set.size(:internal, [64,36])
pm_output.draw.pixel(pm_pct-to-pos(1/2,1/2))
pm_output.present()

pm_input.delay(2000)
;;;
